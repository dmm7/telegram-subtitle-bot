import os
import subprocess
import tempfile
import shutil
import json
import telegram

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import yt_dlp
import ffmpeg
from deep_translator import GoogleTranslator


# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
TOKEN = "8390458001:AAFcG4B-CV8hJ9TUF1xI5cr9SL_FMsDv1Dc"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!
MAX_DURATION = 600  # –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 10 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MAX_FILESIZE = 100 * 1024 * 1024  # 100 –ú–ë
# =======================


def format_time(seconds):
    h = int(seconds // 3600)
    m = int((seconds % 3600) // 60)
    s = int(seconds % 60)
    ms = int((seconds - int(seconds)) * 1000)
    return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"


def generate_srt(segments, srt_path):
    with open(srt_path, "w", encoding="utf-8-sig") as f:  # utf-8-sig = –±–µ–∑ BOM
        for i, seg in enumerate(segments, 1):
            start = format_time(seg["start"])
            end = format_time(seg["end"])
            text = seg["text"].strip()
            f.write(f"{i}\n{start} --> {end}\n{text}\n\n")


def translate_segments(segments):
    translated = []
    for seg in segments:
        try:
            tr = GoogleTranslator(source='en', target='ru').translate(seg["text"])
        except Exception:
            tr = seg["text"]  # fallback
        translated.append({
            "start": seg["start"],
            "end": seg["end"],
            "text": tr
        })
    return translated


def run_whisper(audio_path):
    print("üîä –ó–∞–ø—É—Å–∫–∞–µ–º Whisper...")
    print(f"üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path}")
    
    json_path = audio_path.replace(".wav", ".json")
    print(f"üìÑ –û–∂–∏–¥–∞–µ–º—ã–π JSON: {json_path}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—É–¥–∏–æ
    if not os.path.exists(audio_path):
        raise Exception("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Whisper")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ø–∞–ø–∫—É?")
    test_file = os.path.join(os.path.dirname(audio_path), "test_write.txt")
    try:
        with open(test_file, 'w') as f:
            f.write("test")
        print("‚úÖ –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞")
        os.remove(test_file)
    except Exception as e:
        print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
        raise

    # –ó–∞–ø—É—Å–∫–∞–µ–º Whisper
    result = subprocess.run([
        "whisper", audio_path,
        "--model", "tiny",
        "--language", "en",
        "--task", "translate",
        "--output_format", "json",
        "--output_dir", os.path.dirname(audio_path)
    ], capture_output=True, text=True)

    print("‚úÖ Whisper –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    print("STDOUT:", result.stdout)
    print("STDERR:", result.stderr)

    if result.returncode != 0:
        raise Exception(f"‚ùå Whisper –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")

    if not os.path.exists(json_path):
        raise Exception(f"‚ùå Whisper –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª: {json_path}")

    print("üìÑ JSON –Ω–∞–π–¥–µ–Ω, —á–∏—Ç–∞–µ–º...")
    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    return data["segments"]


def download_video(url, temp_dir):
    ydl_opts = {
        "format": "best",
        "outtmpl": os.path.join(temp_dir, "video.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "http_headers": {
            "Referer": "https://rutube.ru/",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        },
        "retries": 5,
        "fragment_retries": 5,
        "extractor_retries": 3,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            return filename, info.get("duration", 0)
        except Exception as e:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {str(e)}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [{"text": "üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"}, {"text": "üåê –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"}],
        [{"text": "üõë –û—Ç–º–µ–Ω–∞"}]
    ]
    reply_markup = {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": False}

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
        "1. –í–∏–¥–µ–æ (–¥–æ 20 –ú–ë) –∏–ª–∏\n"
        "2. –°—Å—ã–ª–∫—É –Ω–∞ YouTube / Rutube\n\n"
        "–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å, –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –≤–µ—Ä–Ω—É –≤–∏–¥–µ–æ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏! üéûÔ∏èüá∑üá∫",
        reply_markup=reply_markup
    )


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4 –∏–ª–∏ MKV.")
    elif text == "üåê –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ! –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ Rutube.")
    elif text == "üõë –û—Ç–º–µ–Ω–∞":
        context.user_data['cancel_requested'] = True
        await update.message.reply_text("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # --- –°—Å—ã–ª–∫–∞ ---
    if update.message.text and ("http" in update.message.text or "youtu" in update.message.text or "rutube" in update.message.text):
        url = update.message.text.strip()
        await update.message.reply_text("üîó –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")
        
        with tempfile.TemporaryDirectory() as temp_dir:
            try:
                video_path, duration = download_video(url, temp_dir)
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
                return

            if duration > MAX_DURATION:
                await update.message.reply_text(f"‚è≥ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (>{MAX_DURATION} —Å–µ–∫).")
                return

            await _process_video(update, context, video_path, temp_dir)

    # --- –í–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ---
    elif update.message.video or update.message.document:
        await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...")

        file = update.message.document or update.message.video
        if file.file_size > MAX_FILESIZE:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{MAX_FILESIZE / 1024 / 1024:.0f} –ú–ë).\n"
                "üì§ –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∫–∞–∫ **—Ñ–∞–π–ª** (–Ω–µ –∫–∞–∫ –≤–∏–¥–µ–æ),\n"
                "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π **—Å—Å—ã–ª–∫—É —Å YouTube / Rutube** ‚Äî —Ç–∞–∫ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
            )
            return

        file_name = file.file_name or "video.mp4"
        if not (file_name.lower().endswith(".mp4") or file_name.lower().endswith(".mkv")):
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ .mp4 –∏–ª–∏ .mkv")
            return

        with tempfile.TemporaryDirectory() as temp_dir:
            file_path = os.path.join(temp_dir, file_name)
            try:
                actual_file = await file.get_file()
                await actual_file.download_to_drive(file_path)
            except telegram.error.BadRequest as e:
                if "File is too big" in str(e):
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n"
                        "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–π –≤–∏–¥–µ–æ –∫–∞–∫ **–¥–æ–∫—É–º–µ–Ω—Ç** (–Ω–µ –∫–∞–∫ –≤–∏–¥–µ–æ),\n"
                        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π **—Å—Å—ã–ª–∫—É —Å YouTube / Rutube** ‚Äî —Ç–∞–∫ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
                    )
                    return
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
                    return
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                return

    await _process_video(update, context, file_path, temp_dir)

async def _process_video(update: Update, context: ContextTypes.DEFAULT_TYPE, video_path: str, temp_dir: str):
    context.user_data['cancel_requested'] = False

    try:
        # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
        await update.message.reply_text("üéß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        audio_path = os.path.join(temp_dir, "audio.wav")
        result = subprocess.run([
            "ffmpeg", "-i", video_path, "-vn", "-ac", "1", "-ar", "16000", "-f", "wav", audio_path
        ], capture_output=True)

        if result.returncode != 0:
            if context.user_data.get('cancel_requested'):
                await update.message.reply_text("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ.")
            return

        if not os.path.exists(audio_path):
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ.")
            return

        # 2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Whisper
        await update.message.reply_text("üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º...")
        segments = run_whisper(audio_path)
        
        if context.user_data.get('cancel_requested'):
            await update.message.reply_text("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
            return

        translated_segments = translate_segments(segments)

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ SRT
        srt_path = os.path.join(temp_dir, "subs.srt")
        generate_srt(translated_segments, srt_path)

        if not os.path.exists(srt_path):
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã.")
            return

        if os.path.getsize(srt_path) == 0:
            await update.message.reply_text("‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –ø—É—Å—Ç—ã.")
            return

        # 4. –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: –≤—ã–∑—ã–≤–∞–µ–º ffmpeg –∏–∑ –ø–∞–ø–∫–∏ C:\temp
        await update.message.reply_text("üé® –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤–∏–¥–µ–æ...")
        output_path = os.path.join(temp_dir, "final.mp4")

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ C:\temp
        short_dir = "C:\\temp"
        os.makedirs(short_dir, exist_ok=True)

        video_short = os.path.join(short_dir, "input.mp4")
        srt_short = os.path.join(short_dir, "subs.srt")
        output_short = os.path.join(short_dir, "output.mp4")

        shutil.copy2(video_path, video_short)
        shutil.copy2(srt_path, srt_short)

        print(f"üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –≤ C:\\temp: {os.listdir(short_dir)}")

        try:
            cmd = [
                "ffmpeg",
                "-y",
                "-i", "subs.srt",
                "-i", "input.mp4",
                "-c:a", "copy",
                "-c:v", "libx264",
                "-crf", "23",
                "-preset", "fast",
                "-vf", "subtitles=subs.srt:charenc=utf-8",
                "output.mp4"
            ]

            result = subprocess.run(
                cmd,
                cwd=short_dir,
                capture_output=True,
                text=True,
                check=False
            )

            if result.returncode != 0:
                print("FFMPEG STDERR:", result.stderr)
                print("FFMPEG STDOUT:", result.stdout)
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ ffmpeg –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤.")
                return

            shutil.copy2(output_short, output_path)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            return

        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
        try:
            with open(output_path, "rb") as f:
                await update.message.reply_video(video=f, supports_streaming=True)
        except Exception as e:
            if "TimedOut" in str(type(e).__name__):
                await update.message.reply_text("üìπ –í–∏–¥–µ–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç.")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: {str(e)}")

    except Exception as e:
        if context.user_data.get('cancel_requested'):
            await update.message.reply_text("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            import traceback
            print(traceback.format_exc())


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cancel_requested'] = True
    await update.message.reply_text("üõë –û—Ç–º–µ–Ω–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.")


# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê ============
if __name__ == "__main__":
    app = Application.builder() \
        .token(TOKEN) \
        .connect_timeout(30.0) \
        .read_timeout(120.0) \
        .write_timeout(120.0) \
        .pool_timeout(30.0) \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"https?://"), handle_message))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.ALL, handle_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    app.run_polling()
